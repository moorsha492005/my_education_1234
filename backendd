onst express = require("express");
const sql = require("mssql");
const cors = require("cors");
require("dotenv").config(); // Load environment variables

const app = express();
app.use(express.json());
app.use(cors());

// Azure SQL Database Configuration
const dbConfig = {
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    server: process.env.DB_SERVER,
    database: process.env.DB_NAME,
    options: {
        encrypt: true,
        enableArithAbort: true,
    },
};

// Create a connection pool (efficient database management)
const poolPromise = new sql.ConnectionPool(dbConfig)
    .connect()
    .then((pool) => {
        console.log("✅ Connected to Azure SQL Database");
        return pool;
    })
    .catch((err) => {
        console.error("❌ Database connection failed: ", err);
        process.exit(1);
    });

// *📌 API Routes*

// ✅ Get all students
app.get("/students", async (req, res) => {
    try {
        const pool = await poolPromise;
        const result = await pool.request().query("SELECT * FROM Students");
        res.json(result.recordset);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ✅ Get a student by ID
app.get("/students/:id", async (req, res) => {
    try {
        const { id } = req.params;
        const pool = await poolPromise;
        const result = await pool.request().input("id", sql.Int, id).query("SELECT * FROM Students WHERE id = @id");

        if (result.recordset.length === 0) return res.status(404).json({ error: "Student not found" });
        res.json(result.recordset[0]);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ✅ Add a new student
app.post("/students", async (req, res) => {
    const { name, grade, email } = req.body;
    try {
        const pool = await poolPromise;
        await pool
            .request()
            .input("name", sql.NVarChar, name)
            .input("grade", sql.NVarChar, grade)
            .input("email", sql.NVarChar, email)
            .query("INSERT INTO Students (name, grade, email) VALUES (@name, @grade, @email)");

        res.status(201).json({ message: "✅ Student added successfully" });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ✅ Update student details
app.put("/students/:id", async (req, res) => {
    const { id } = req.params;
    const { name, grade, email } = req.body;
    try {
        const pool = await poolPromise;
        await pool
            .request()
            .input("id", sql.Int, id)
            .input("name", sql.NVarChar, name)
            .input("grade", sql.NVarChar, grade)
            .input("email", sql.NVarChar, email)
            .query("UPDATE Students SET name = @name, grade = @grade, email = @email WHERE id = @id");

        res.json({ message: "✅ Student updated successfully" });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ✅ Delete a student
app.delete("/students/:id", async (req, res) => {
    const { id } = req.params;
    try {
        const pool = await poolPromise;
        await pool.request().input("id", sql.Int, id).query("DELETE FROM Students WHERE id = @id");

        res.json({ message: "✅ Student deleted successfully" });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// ✅ Start server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(🚀 Server running on port ${PORT});
});
